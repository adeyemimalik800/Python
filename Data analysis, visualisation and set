
- `sepal_length`  
- `sepal_width`  
- `petal_length`  
- `petal_width`  
- `species`  

Example of the first few rows (CSV format):
sepal_length,sepal_width,petal_length,petal_width,species
5.1,3.5,1.4,0.2,setosa
4.9,3.0,1.4,0.2,setosa
6.2,3.4,5.4,2.3,virginica
5.9,3.0,5.1,1.8,virginica

```python
import pandas as pd

Load directly from seaborn (which has the dataset built-in)
import seaborn as sns
iris = sns.load_dataset('iris')

Or if you have a CSV file:
iris = pd.read_csv('path_to_your_file.csv')

Display the first 5 rows
print(iris.head())
```
If you're using a local CSV file, replace `'path_to_your_file.csv'` with the correct file path.

Here's how to display the first few rows of a dataset using `.head()`:

```python
import pandas as pd
import seaborn as sns

Load the Iris dataset
iris = sns.load_dataset('iris')

Display the first 5 rows
print(iris.head())
```
sepal_length  sepal_width  petal_length  petal_width species
0           5.1          3.5           1.4          0.2  setosa
1           4.9          3.0           1.4          0.2  setosa
2           4.7          3.2           1.3          0.2  setosa
3           4.6          3.1           1.5          0.2  setosa
4           5.0          3.6           1.4          0.2  setosa

```python
import pandas as pd
import seaborn as sns

Load the Iris dataset
iris = sns.load_dataset('iris')

Check data types and non-null counts
print(iris.info())

Check for missing values
print("\nMissing values:\n", iris.isnull().sum())
```
*Explanation:*
- `iris.info()` gives you column names, data types, and non-null counts.
- `iris.isnull().sum()` shows how many missing values are in each column.

python
import pandas as pd
import seaborn as sns

Load dataset
iris = sns.load_dataset('iris')

Check for missing values
print("Missing values before cleaning:\n", iris.isnull().sum())

Drop rows with any missing values (if any)
iris_cleaned = iris.dropna()

Alternatively, you could fill missing values:
iris_cleaned = iris.fillna(method='ffill')  # Forward fill
iris_cleaned = iris.fillna(iris.mean(numeric_only=True))  # Fill with mean

Confirm cleaning
print("\nMissing values after cleaning:\n", iris_cleaned.isnull().sum())

```python
import pandas as pd
import seaborn as sns

Load dataset
iris = sns.load_dataset('iris')

Clean the data (drop missing values if any)
iris_cleaned = iris.dropna()

Compute basic statistics
stats = iris_cleaned.describe()

print(stats)
```
This will display:
- *count*: Number of non-null entries
- *mean*: Average of each column
- *std*: Standard deviation
- *min*, *25%*, *50%* (median), *75%*, and *max* values.

```python
import pandas as pd
import seaborn as sns

Load dataset
iris = sns.load_dataset('iris')

Group by 'species' and compute the mean of each numerical column
grouped_means = iris.groupby('species').mean(numeric_only=True)

print(grouped_means)
```
This groups the dataset by the *species* column and calculates the *mean* of numerical columns like `sepal_length`, `sepal_width`, etc., for each species.


1. *Sepal & Petal Differences by Species*:
   - *Setosa* has the *smallest* petal length and width, making it easily distinguishable.
   - *Virginica* shows the *largest* average sepal and petal dimensions.
   - *Versicolor* falls in between Setosa and Virginica in size.

2. *Clear Separation by Petal Size*:
   - Petal length and width are strong indicators for classifying species. Setosa's petal width (~0.25 cm) is distinctly smaller than Versicolor (~1.33 cm) and Virginica (~2.03 cm).

3. *Sepal Length vs Width*:
   - Setosa has a *shorter but wider sepal*, while Virginica has the *longest sepals* but not necessarily the widest.

python
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

Load dataset
df = sns.load_dataset('iris')

1. Bar chart – Average petal length per species
plt.figure(figsize=(6,4))
sns.barplot(data=df, x='species', y='petal_length')
plt.title('Average Petal Length per Species')
plt.show()

2. Histogram – Distribution of sepal length
plt.figure(figsize=(6,4))
sns.histplot(df['sepal_length'], bins=10, kde=True)
plt.title('Distribution of Sepal Length')
plt.xlabel('Sepal Length (cm)')
plt.show()

3. Scatter plot – Sepal length vs Petal length
plt.figure(figsize=(6,4))
sns.scatterplot(data=df, x='sepal_length', y='petal_length', hue='species')
plt.title('Sepal Length vs Petal Length by Species')
plt.show()

4. Line chart – Simulated time-series using index as date
df['date'] = pd.date_range(start='2023-01-01', periods=len(df), freq='D')
daily_avg = df.groupby('date')['sepal_length'].mean()

plt.figure(figsize=(10,4))
daily_avg.plot()
plt.title('Trend of Average Sepal Length Over Time')
plt.xlabel('Date')
plt.ylabel('Average Sepal Length')
plt.tight_layout()
plt.show()
```
This will give you:
- A *bar chart* comparing petal lengths.
- A *histogram* showing the distribution of sepal length.
- A *scatter plot* to visualize correlation.
- A *line chart* simulating time-series trends.

```python
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

Load dataset
df = sns.load_dataset('iris')

1. Bar Chart – Average Petal Length per Species
plt.figure(figsize=(8, 5))
sns.barplot(data=df, x='species', y='petal_length', palette='pastel')
plt.title('Average Petal Length per Iris Species', fontsize=14)
plt.xlabel('Species', fontsize=12)
plt.ylabel('Average Petal Length (cm)', fontsize=12)
plt.tight_layout()
plt.show()

2. Histogram – Distribution of Sepal Length
plt.figure(figsize=(8, 5))
sns.histplot(df['sepal_length'], bins=15, kde=True, color='skyblue')
plt.title('Distribution of Sepal Length', fontsize=14)
plt.xlabel('Sepal Length (cm)', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.tight_layout()
plt.show()

3. Scatter Plot – Sepal Length vs Petal Length by Species
plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x='sepal_length', y='petal_length', hue='species', palette='Set2')
plt.title('Sepal Length vs Petal Length by Species', fontsize=14)
plt.xlabel('Sepal Length (cm)', fontsize=12)
plt.ylabel('Petal Length (cm)', fontsize=12)
plt.legend(title='Species')
plt.tight_layout()
plt.show()
4. Line Chart – Trend of Average Sepal Length Over Time
df['date'] = pd.date_range(start='2023-01-01', periods=len(df), freq='D')
daily_avg = df.groupby('date')['sepal_length'].mean()

plt.figure(figsize=(10, 5))
plt.plot(daily_avg.index, daily_avg.values, color='teal', linewidth=2)
plt.title('Trend of Average Sepal Length Over Time', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Average Sepal Length (cm)', fontsize=12)
plt.grid(True)
plt.tight_layout()
plt.show()
